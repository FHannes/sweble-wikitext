/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 *
 * Semi Pre Block Level Element
 * ----------------------------
 *
 *   Grammar:
 *     - SemiPreLine (Eol SemiPreLine)*
 *
 *   AST node:
 *     Name        : SemiPre
 *     Extends     : ContentNode
 *     Constructor : content
 *     NodeType    : org.sweble.wikitext.lazy.AstNodeTypes.NT_SEMI_PRE
 *
 * Semi Pre Line
 * -------------
 *
 *   Grammar:
 *     - Eol? ' ' SemiPreContentStar
 *
 *   AST node:
 *     Name        : SemiPreLine
 *     Extends     : ContentNode
 *     Constructor : content
 *     NodeType    : org.sweble.wikitext.lazy.AstNodeTypes.NT_SEMI_PRE_LINE
 *
 */

module org.sweble.wikitext.lazy.parser.SemiPre;

import org.sweble.wikitext.lazy.parser.Content;
import org.sweble.wikitext.lazy.parser.State;
import org.sweble.wikitext.lazy.parser.Whitespace;




// -- SemiPre --[ State Aware Memoization ]-------------------------------------

noinline transient AstNode SemiPre =
 ^{
    StateAwareResult r = (StateAwareResult) pSemiPreMemoized(yyBase);
    final LazyParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pSemiPreTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized AstNode SemiPreMemoized =
 ^{
    Result yyResult = new StateAwareResult("SemiPre", getContext(), pSemiPreTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- SemiPre ------------------------------------------------------------------

noinline transient AstNode SemiPreTransient =
  &{ accept(ParserAtoms.SEMI_PRE) } first:FirstSemiPreLine tail:( SemiPreLine )*
  {
    yyValue = new SemiPre(new NodeList(first, tail));
  }
;

private inline SemiPreLine FirstSemiPreLine =
  !EmptyLine rt1:pTpStar ' ' !OpenOrCloseMatch content:SemiPreContentStar
  {
    yyValue = new SemiPreLine(content);

    if (isGatherRtData())
      addRtData(yyValue, joinRt(rt1, ' '), null);
  }
;

private inline SemiPreLine SemiPreLine =
  rt0:pEol rt1:pTpStar ' ' !OpenOrCloseMatch content:SemiPreContentStar
  {
    yyValue = new SemiPreLine(content);

    if (isGatherRtData())
      addRtData(yyValue, joinRt(rt0, rt1, ' '), null);
  }
;

private inline void EmptyLine =
  pExtSpaceStar slEol
;

// TODO: This is insufficient to capture MediaWiki's behavior!
//       Unfortunatly I don't yet fully understand MediaWiki's behavior :(
private inline void OpenOrCloseMatch =
  pExtSpaceStar '<' '/'?
    ( "div" / "hr" / "center" / "pre" / "p" / "blockquote"
    / "h1" / "h2" / "h3" / "h4" / "h5" / "h6"
    / "table" / "tr" / "td" / "th"
    / "ul" / "ol" / "li"
    )
;

private inline stateful NodeList SemiPreContentStar =
  {
    enter(ParserScopes.SEMI_PRE);
  }
  InlineContentStar
;




// -- End of file -------------------------------------------------------------
