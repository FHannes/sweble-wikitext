/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-Nürnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * LanguageConversionTag
 * ---------------------
 *
 *   Grammar:
 *     - "-{" TEXT "}-"
 *     - "-{" FLAGS "|" ( A "=>" )? VARIANT ":" B ( ";" ( A "=>" )? VARIANT ":" B )* "|" TEXT }-
 *
 */

module org.sweble.wikitext.parser.parser.LangConvTag;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.State;
import org.sweble.wikitext.parser.parser.Whitespace;

import org.sweble.wikitext.parser.utils.ParserCharSequence;
import org.sweble.wikitext.parser.utils.Warnings;




// -- Header / Body / Footer ---------------------------------------------------

body
{
  private boolean hasFlag(WtLctFlags flags, char c)
  {
    return flags.getFlags().contains("" + c);
  }
  
  private boolean containsVariant(WtLctFlags flags)
  {
    return !flags.getVariants().isEmpty();
  }
}




// -- LanguageConversionTag ----------------------------------------------------

transient WtNode LanguageConversionTag =
    "-{" yyValue:LanguageConversionTagChoice
  / "-{"
    {
      yyValue = nf.text("-{");
    }
;

inline void InlineContentStopperLangConvTag =
  &{ inScope(ParserScopes.LCT_PART) } "}-"
;

private transient WtNode LanguageConversionTagChoice =
    LctConvertToSpecifiedVariant
  / LctProtect
  / LctRuleBasedConvert
;

/* If flags are given AND contain a variant the stuff after the '|' is treated 
 * as text to be converted into the given variant. The flag 'R' is set in any case.
 */
private transient WtNode LctConvertToSpecifiedVariant =
  flags:LctFlags void:'|' &{ containsVariant(flags) || hasFlag(flags, 'N') } text:LctTextStar "}-"
  {
    yyValue = nf.lctVarConv(flags, nf.body(text));
    setRtd(yyValue, "-{", SEP, '|', SEP, "}-");
  }
;

/* No flags, no rules -> just protect the content in braces from language 
 * conversion.
 */
private transient WtNode LctProtect =
  &LctIsProtect text:LctTextStar "}-"
  {
    WtLctFlags flags = nf.lctFlags(Collections.<String>emptyList());
    yyValue = nf.lctVarConv(flags, nf.body(text));
    setRtd(yyValue, "-{", SEP, SEP, "}-");
  }
;

private transient void LctIsProtect =
  ( !"}-" !';' !"=>" !':' !'|' !SafeGuard _ )* "}-"
;

/* The flags do not specify a language variant and neither the 'N' 
 * nor the 'R' flag is set. In this case the part after the '|' is a set of rules.
 */
private transient WtNode LctRuleBasedConvert =
  flags:( LctFlags void:'|' )? rules:LctRules "}-"
  {
    if (flags == null)
    {
      flags = nf.lctFlags(Collections.<String>emptyList());
      yyValue = nf.lctRuleConv(flags, nf.lctRules(rules));
      setRtd(yyValue, "-{", SEP, SEP, "}-");
    }
    else
    {
      yyValue = nf.lctRuleConv(flags, nf.lctRules(rules));
      setRtd(yyValue, "-{", SEP, '|', SEP, "}-");
    }
  }
;

/* A list of flags, separated by ';'.
 * Flags have to be further processed. Some flags turn off other flags,
 * some flags add additional flags and some flags enable the identification
 * of variant names (which would be ignored otherwise).
 */
private transient WtLctFlags LctFlags =
  head:LctFlag tail:( void:';' LctFlag )*
  {
    List<String> flags = new Pair<String>(head, tail).list();
    yyValue = nf.lctFlags(flags);
    setRtd(yyValue, org.apache.commons.lang.StringUtils.join(flags, ';'));
  }
;

/* A flag usually is a single letter or symbol.
 * Some language variants have words which map to one of those symbols.
 * Finally a flag can also be the name of a language variant.
 *
 * Default flags: A, T, R, D, -, H, N
 * Implicit flags: S, +, E
 * Examples for additional flags from LanguageSr.php: ријеч => W, писмо => S
 * Examples for language variant names: zh-hans, zh-hk
 */
private transient String LctFlag =
  ( !"}-" !'|' !';' !SafeGuard _ )*
;

private transient String LctRulePart =
  ( !"}-" !';' !"=>" !':' !SafeGuard _ )*
;

private transient String LctRuleGarbage =
  ( !"}-" !';' !SafeGuard _ )*
;

private transient WtNode LctRule =
    a:LctRulePart "=>" v:LctRulePart ":" b:LctRulePart
    {
      yyValue = nf.lctRule(a, v, b);
      setRtd(yyValue, a, "=>", v, ":", b);
    }
  / v:LctRulePart ":" b:LctRulePart
    {
      yyValue= nf.lctRule(v, b);
      setRtd(yyValue, v, ":", b);
    }
  / garbage:LctRuleGarbage
    {
      yyValue = nf.lctGarbage(garbage);
      setRtd(yyValue, garbage);
    }
;

private transient WtNodeList LctRules =
  head:LctRule tail:( void:';' LctRule )*
  {
    Pair<WtNode> t = tail;
    while (!t.isEmpty())
    {
      WtRtData rtd = t.head().getRtd();
      if (rtd != null)
        rtd.prepend(";");
      t = t.tail();
    }

    yyValue = nf.list(head, tail);
  }
;

private transient stateful WtNodeList LctTextStar =
  {
    enter(ParserScopes.LCT_PART);
  }
  InlineContentStar
;

private transient void SafeGuard =
  slEol
  ( pExtSpaceStar "{|"
  / pTpStar       "---"
  / pTpStar       [*#:;]
  / pTpStar       [ ]
  / pTpStar       [=]
  )
;




// -- End of file --------------------------------------------------------------
