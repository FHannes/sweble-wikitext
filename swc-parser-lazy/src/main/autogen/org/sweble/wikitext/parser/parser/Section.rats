/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 *
 * Section SectionHeading
 * ---------------
 *
 *   Grammar:
 *     - '='+ Title '='+ Space* EolOrEof
 *
 *   The title can contain:
 *     - ExternalLink
 *     - InternalLink
 *     - PageSwitch
 *     - WtParserEntity
 *     - PlainExternalLink
 *     - Signature
 *     - Ticks
 *     - XmlElement
 *     - XmlReference
 *
 *   The title cannot contain:
 *     - Newline
 *       - Tables
 *       - Headings
 *       - Horizontal lines
 *       - Block level elements
 *
 *   The title can not contain (syntactically):
 *     - Newlines
 *
 *   AST node:
 *     Name        : SectionHeading
 *     Extends     : ContentNode
 *     Constructor : "content, level"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_HEADING
 *
 *     Properties:
 *       level : int
 *
 * Section
 * -------
 *
 *   AST node:
 *     Name        : Section
 *     Extends     : WtInnerNode2
 *     Constructor : "level, title, body"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_SECTION
 *
 *     Properties:
 *       level   : int
 *
 *     Children:
 *       title : WtList
 *       body  : WtList
 *
 */

module org.sweble.wikitext.parser.parser.Section;

import org.sweble.wikitext.parser.utils.Warnings;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- SectionHeading ------------------------------------------------------------------

header
{
  import java.util.Stack;
}

body
{
  private SectionHeading createHeading(
      int spanFrom,
      Result spanTo,
      WikitextNode rt0,
      int oCount,
      WtList title,
      int cCount,
      WikitextNode rt1)
  {
    int oOdd = 0;
    int cOdd = 0;

    if (oCount > 6)
    {
      oOdd = oCount - 6;
      oCount = 6;
    }

    if (cCount > 6)
    {
      cOdd = cCount - 6;
      cCount = 6;
    }

    int level;
    if (cCount > oCount)
    {
      level = oCount;
      cOdd += cCount - oCount;
      cCount -= cCount - oCount;
    }
    else
    {
      level = cCount;
      oOdd += oCount - cCount;
      oCount -= oCount - cCount;
    }

    SectionHeading heading = new SectionHeading(title, level);

    WtText oOddText = null;
    if (oOdd > 0)
    {
      if (isWarningLevelEnabled(WS_NORMAL))
        fileOddSyntaxWarning(
            heading,
            makeSpan(spanFrom, spanTo),
            WS_NORMAL,
            "Odd number of opening equals");
      oOddText = new WtText(StringUtils.strrep('=', oOdd));
    }

    WtText cOddText = null;
    if (cOdd > 0)
    {
      if (isWarningLevelEnabled(WS_NORMAL))
        fileOddSyntaxWarning(
            heading,
            makeSpan(spanFrom, spanTo),
            WS_NORMAL,
            "Odd number of closing equals");
      cOddText = new WtText(StringUtils.strrep('=', cOdd));
    }

    heading.setContent(new WtList(oOddText, title, cOddText));

    if (isGatherRtData())
    {
      String equals = StringUtils.strrep('=', level);
      addRtData(heading,
          joinRt(rt0, equals),
          joinRt(equals, rt1));
    }

    return heading;
  }

  private void fixSectionMetadata(SectionHeading heading, Section section)
  {
    RtData rtd = (RtData) heading.getAttribute("RTD");
    if (rtd != null)
    {
      Object[][] newRts = new Object[3][];
      newRts[0] = rtd.getRts()[0];
      newRts[1] = rtd.getRts()[1];
      newRts[2] = null;
      section.setAttribute("RTD", new RtData(newRts));
    }

    Object warnings = heading.getAttribute("warnings");
    if (warnings != null)
      section.setAttribute("warnings", warnings);
  }

  private WikitextNode makeSections(Section first, Pair<Section> tail)
  {
    Stack<Section> stack = new Stack<Section>();
    stack.push(first);

    WtList result = new WtList(first);

    Pair<Section> i = tail;
    while (!i.isEmpty())
    {
      Section s = i.head();
      while (!stack.isEmpty() && s.getLevel() <= stack.peek().getLevel())
        stack.pop();

      if (stack.isEmpty())
      {
        result.add(s);
      }
      else
      {
        // TODO: Dangerous! We must clone the section instead!
        stack.peek().setBody(new WtList(stack.peek().getBody(), s));
      }

      stack.push(s);

      i = i.tail();
    }

    return result;
  }
}




// -- Sections --[ State Aware Memoization ]------------------------------------

noinline transient WikitextNode Sections =
 ^{
    StateAwareResult r = (StateAwareResult) pSectionsMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pSectionsTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WikitextNode SectionsMemoized =
 ^{
    Result yyResult = new StateAwareResult("Sections", getContext(), pSectionsTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- Sections -----------------------------------------------------------------

noinline transient WikitextNode SectionsTransient =
  &{ accept(ParserAtoms.SECTIONS) } first:Section tail:Section*
  {
    yyValue = makeSections(first, tail);
  }
;

inline void InlineContentStopperHeading =
  &{ inScope(ParserScopes.SECTION_HEADING) } EqualsStr pExtSpaceStar slEolOrEof
;

inline void BlockStopperNextSection =
  &{ inScope(ParserScopes.SECTION_BODY) } SectionHeading
;




// -- Section ------------------------------------------------------------------

private noinline transient Section Section =
    h:SectionHeading Eof
    {
      yyValue = new Section(h.getLevel(), h.getContent(), new WtList());
      fixSectionMetadata(h, yyValue);
    }
  / h:SectionHeading body:SectionContentStar
    {
      yyValue = new Section(h.getLevel(), h.getContent(), body);
      fixSectionMetadata(h, yyValue);
    }
;




// -- SectionHeading --[ State Aware Memoization ]-------------------------------------

noinline transient SectionHeading SectionHeading =
 ^{
    StateAwareResult r = (StateAwareResult) pHeadingMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pHeadingTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized SectionHeading HeadingMemoized =
 ^{
    Result yyResult = new StateAwareResult("SectionHeading", getContext(), pHeadingTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- SectionHeading ------------------------------------------------------------------

noinline transient SectionHeading HeadingTransient =
  rt0:pTpStar open:EqualsStr heading:HeadingContentStar close:EqualsStr rt1:pExtSpaceStar &slEolOrEof
  {
    // TODO: add warning productions
    yyValue = createHeading(yyStart, yyResult, rt0, open.length(), heading, close.length(), rt1);
  }
;

private transient String EqualsStr = "="+ ;




// -- Content ------------------------------------------------------------------

private inline stateful WtList HeadingContentStar =
  {
    enter(ParserScopes.SECTION_HEADING);
  }
  InlineContentPlus
;

private inline stateful WtList SectionContentStar =
  {
    enter(ParserScopes.SECTION_BODY);
  }
  BlockContent
;




// -- End of file --------------------------------------------------------------
