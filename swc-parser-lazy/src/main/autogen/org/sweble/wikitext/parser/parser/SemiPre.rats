/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Semi Pre Block Level Element
 * ----------------------------
 *
 *   Grammar:
 *     - SemiPreLine (Eol SemiPreLine)*
 *
 * Semi Pre Line
 * -------------
 *
 *   Grammar:
 *     - Eol? ' ' SemiPreContentStar
 *
 */

module org.sweble.wikitext.parser.parser.SemiPre;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.State;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- SemiPre --[ State Aware Memoization ]-------------------------------------

noinline transient WtNode SemiPre =
 ^{
    StateAwareResult r = (StateAwareResult) pSemiPreMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pSemiPreTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtNode SemiPreMemoized =
 ^{
    Result yyResult = new StateAwareResult("SemiPre", getContext(), pSemiPreTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- SemiPre ------------------------------------------------------------------

noinline transient WtNode SemiPreTransient =
  &{ accept(ParserAtoms.SEMI_PRE) } first:FirstSemiPreLine tail:( SemiPreLine )*
  {
    yyValue = nf.semiPre(nf.list(first, tail));
  }
;

private inline WtSemiPreLine FirstSemiPreLine =
  !EmptyLine rt1:pTpStar ' ' !OpenOrCloseMatch content:SemiPreContentStar
  {
    yyValue = setRtd(
      nf.semiPreLine(content),
      rt1, ' ', SEP);
  }
;

private inline WtSemiPreLine SemiPreLine =
  rt0:pEol rt1:pTpStar ' ' !OpenOrCloseMatch content:SemiPreContentStar
  {
    yyValue = setRtd(
      nf.semiPreLine(content),
      rt0, rt1, ' ', SEP);
  }
;

private inline void EmptyLine =
  pExtSpaceStar slEol
;

// TODO: This is insufficient to capture MediaWiki's behavior!
//       Unfortunatly I don't yet fully understand MediaWiki's behavior :(
private inline void OpenOrCloseMatch =
  pExtSpaceStar '<' '/'?
    ( "div" / "hr" / "center" / "pre" / "p" / "blockquote"
    / "h1" / "h2" / "h3" / "h4" / "h5" / "h6"
    / "table" / "tr" / "td" / "th"
    / "ul" / "ol" / "li"
    )
;

private inline stateful WtNodeList SemiPreContentStar =
  {
    enter(ParserScopes.SEMI_PRE);
  }
  InlineContentStar
;




// -- End of file -------------------------------------------------------------
