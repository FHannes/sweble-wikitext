/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 *
 * TableCaption
 * ------------
 *
 *   Grammar:
 *     - S* '|+' TableAttributeInline* S* '|' TableCaptionContent* Garbage* Eol
 *
 *   AST node:
 *     Name        : TableCaption
 *     Extends     : WtInnerNode2
 *     Constructor : "xmlAttributes, body"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_TABLE_CAPTION
 *
 *     Children:
 *       xmlAttributes : WtList
 *       body          : WtList
 *
 */

module org.sweble.wikitext.parser.parser.TableCaption;

import org.sweble.wikitext.parser.utils.Assert;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.TableAttributeInline;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- Table Caption --[ State Aware Memoization ]-------------------------------

noinline transient WikitextNode TableCaption =
 ^{
    StateAwareResult r = (StateAwareResult) pTableCaptionMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pTableCaptionTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WikitextNode TableCaptionMemoized =
  ^{
      Result yyResult = new StateAwareResult("TableCaption", getContext(), pTableCaptionTransient(yyBase));
      if (returnTrue(yyResult))
        return yyResult;
   }
;




// -- Table Caption ------------------------------------------------------------

noinline transient WikitextNode TableCaptionTransient =
    rt0:pExtSpaceStar "|+" attributes:Attributes body:InlineContentStar garbage:Garbage &FollowUpSanityCheck
    {
      yyValue = setRtd(new TableCaption(attributes.getForeign(0, WtList.class), body),
          rt0, "|+", SEP,
          attributes.getForeign(1, Object.class), SEP,
          garbage);
    }
  / rt0:pExtSpaceStar "|+" attributes:Attributes body:BlockContentStar &FollowUpSanityCheck
    {
      yyValue = setRtd(new TableCaption(attributes.getForeign(0, WtList.class), body),
          rt0, "|+", SEP,
          attributes.getForeign(1, Object.class), SEP);
    }
;

private inline String Garbage =
  &"||" garbage:GarbageStar end:( pEol / pEof )
  {
    yyValue = garbage + end;
  }
;

private transient String GarbageStar =
  ( !( slEol pExtSpaceStar [|!] ) _ )*
;

private inline void FollowUpSanityCheck =
  ExpectedFollowUp / ShouldNotBeHere
;

private inline void ExpectedFollowUp =
  pExtSpaceStar ( "!" / "|+" / "|-" / "|}" / "|" / Eof )
;




// -- Table Caption Attributes -------------------------------------------------

private ForeignNode Attributes =
    &AttrPossible attrs:TableAttributeInlineStar ws:pExtSpaceStar '|' !'|'
    {
      yyValue = ForeignNode.from(attrs, (Object) joinRt(ws, '|'));
    }
  / {
      yyValue = ForeignNode.from(new WtList(), null);
    }
;

private transient void AttrPossible =
  ( ![<|] !"[[" !slEol _ )* '|' !'|'
;




// -- Table Caption Content ----------------------------------------------------

private inline stateful WtList InlineContentStar =
  {
    enter(ParserScopes.TABLE_INLINE_CELL);
  }
  InlineContentPlus
;

private inline stateful WtList BlockContentStar =
  {
    enter(ParserScopes.TABLE_CELL);
  }
  BlockContent
;




// -- End of file --------------------------------------------------------------
