/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 *
 * XmlElement
 * ----------
 *
 *   This grammar recognizes start and end tags separatly without matching them.
 *   Finding valid pairs of start and end tags is defered to later processing.
 *
 *   Grammar:
 *     - '</' XmlName Ws* '>'
 *     - '<' XmlName XmlAttribute* Ws* "/>"
 *     - '<' XmlName XmlAttribute* Ws* ">"
 *
 * Closing XML tag
 * ---------------
 *
 *   AST node:
 *     Name        : XmlEndTag
 *     Extends     : LeafNode
 *     Implements  : NamedXmlElement
 *     Constructor : "name"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_XML_TAG_CLOSE
 *
 *     Properties:
 *       name : String
 *
 * Opening XML tag
 * ---------------
 *
 *   AST node:
 *     Name        : XmlStartTag
 *     Extends     : WtInnerNode1
 *     Implements  : NamedXmlElement
 *     Constructor : "name, xmlAttributes"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_XML_TAG_OPEN
 *
 *     Properties:
 *       name : String
 *
 *     Children:
 *       xmlAttributes : WtList
 *
 * Empty XML Element
 * -----------------
 *
 *   AST node:
 *     Name        : XmlEmptyTag
 *     Extends     : WtInnerNode1
 *     Implements  : NamedXmlElement
 *     Constructor : "name, xmlAttributes"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_XML_TAG_EMPTY
 *
 *     Properties:
 *       name : String
 *
 *     Children:
 *       xmlAttributes : WtList
 *
 * XML Element
 * -----------
 *
 *   AST node:
 *     Name        : XmlElement
 *     Extends     : WtInnerNode2
 *     Implements  : NamedXmlElement
 *     Constructor : "name, empty, xmlAttributes, body"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_XML_ELEMENT
 *
 *     Properties:
 *       name  : String
 *       empty : Boolean
 *
 *     Children:
 *       xmlAttributes : WtList
 *       body          : WtList
 *
 */

module org.sweble.wikitext.parser.parser.XmlElement;

import org.sweble.wikitext.parser.utils.Whitespace as Whitespace;

import org.sweble.wikitext.parser.utils.XmlName;
import org.sweble.wikitext.parser.utils.XmlAttribute(Whitespace);




// -- XmlElement ---------------------------------------------------------------

WikitextNode XmlElement =
    "</" yyValue:XmlEndTag
  / '<'  yyValue:XmlStartTag
  / '<'
    {
      yyValue = new WtText("<");
    }
;

private inline WikitextNode XmlEndTag =
    name:XmlName ws:pWsStar '>'
    {
      yyValue = setRtd(new XmlEndTag(name), "</", name, ws, '>');
    }
    // FIXME: Add auto correction and/or warning generation
;

private inline WikitextNode XmlStartTag =
    name:XmlName attributes:AttributeStar ws:pWsStar "/>"
    {
      yyValue = setRtd(new XmlEmptyTag(name, attributes), "<", name, SEP, ws, "/>");
    }
  / name:XmlName attributes:AttributeStar ws:pWsStar '>'
    {
      yyValue = setRtd(new XmlStartTag(name, attributes), '<', name, SEP, ws, '>');
    }
    // FIXME: Add auto correction and/or warning generation
;

private inline WtList AttributeStar =
  yyValue:(&pWsPlus XmlAttributePlus)?
  {
    if (yyValue == null)
      yyValue = new WtList();
  }
;




// -- End of file --------------------------------------------------------------
