/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 *
 * Grammar for MediaWiki Wikitext Preprocessor
 * ------------------------------------------------
 *
 *   The ORIGINAL preprocessor recognizes:
 *     - templates {{...}}
 *     - tag extensions <tag ...>...</tag>
 *     - internal links
 *     - noinclude, includeonly
 *     - onlyinclude
 *     - pre, nowiki
 *     - xml comments
 *
 *   Tag rules overview (ORIGINAL preprocessor):
 *     - Everything between denoted by "..." in the expression <tag...>...</tag>
 *       is treated as text by the preprocessor. Templates and nested tags are
 *       not recognized within tags and their attributes.
 *     - Start tags without closing tag run to the end of the input
 *     - Start tags are recognized if a string "<X...>" can be found in the input,
 *       where X is a valid tag name and ... is everything but a '>'.
 *     - onlyinclude is treated specially and only recognized in the following form:
 *       <onlyinclude>...</onlyinclude>, where ... is anything but the closing tag.
 *
 *   Comment rules overview (ORIGINAL preprocessor):
 *     - Comment start tags without closing tag run to the end of the input
 *     - Comment start tags are recognized if a string "<!--" can be found in the
 *       input.
 *
 *   Argument rules overview (ORIGINAL preprocessor):
 *     - Pipe characters start and separate arguments.
 *     - Pipe characters are only recognized after {{ or [[
 *     - Everything behind a pipe character up to the first equals character is
 *       the argument name
 *     - Everything behind the equals character until closing elements }} or ]] is
 *       a value
 *
 *   Template and Link rules overview (ORIGINAL preprocessor):
 *     - When erroneously nesting opening and closing elements, the inner scope
 *       wins if it is well-formed: {{...[[...}}...]] -> {{...Link
 *
 *   Redirect rules overview (ORIGINAL preprocessor):
 *     - Redirect is only recognized when no non-whitespace text is in front of the
 *       keyword.
 *     - Given "#REDIRECT [[TITLE|x]]y", x and y can be arbitrary text, even
 *       erroneously nested templates. The "|x" part is optional. For example the
 *       following redirect would work: #redirect [[Playground|{{asdf]]as}}df.
 *     - The "redirect" keyword is case-insensitive.
 *
 *   Differences between the ORIGINAL and this preprocessor:
 *     - this preprocessor does recognize #REDIRECT [[...]] statements
 *     - this preprocessor tries to extract attributes for tag extensions
 *
 * PreproWikitextPage
 * --------------------
 *
 *   Grammar:
 *
 *   AST node:
 *     Name        : PreproWikitextPage
 *     Extends     : ContentNode
 *     Constructor : "content, warnings"
 *     Constructor : "content, warnings, entityMap"
 *     NodeType    : org.sweble.wikitext.parser.AstNodeTypes.NT_PREPROCESSED_WIKITEXT_PAGE
 *     Import      : java.util.List
 *     Import      : de.fau.cs.osr.ptk.common.Warning
 *     Import      : de.fau.cs.osr.ptk.common.EntityMap
 *
 *     Properties:
 *       warnings  : List<Warning>
 *       entityMap : EntityMap
 *
 */

module org.sweble.wikitext.parser.preprocessor.Grammar;

import org.sweble.wikitext.parser.utils.Whitespace;
import org.sweble.wikitext.parser.utils.Warnings;

import org.sweble.wikitext.parser.preprocessor.Content;
import org.sweble.wikitext.parser.preprocessor.OnlyInclude;
import org.sweble.wikitext.parser.preprocessor.Redirect;
import org.sweble.wikitext.parser.preprocessor.State;




// -- Header / Body / Footer ---------------------------------------------------

header
{
  import org.sweble.wikitext.parser.*;
  import org.sweble.wikitext.parser.nodes.*;
  import org.sweble.wikitext.parser.parser.*;
  import org.sweble.wikitext.parser.utils.*;

  import de.fau.cs.osr.ptk.common.*;
  import de.fau.cs.osr.ptk.common.ast.*;
  import de.fau.cs.osr.utils.StringUtils;
}

option
  withLocation,
  parser(org.sweble.wikitext.parser.preprocessor.RatsWikitextPreprocessor);




// -- Article ------------------------------------------------------------------

public transient PreproWikitextPage Article =
  redirect:Redirect? content:Content &Eof
  {
    yyValue = new PreproWikitextPage(
        new WtList(redirect, content),
        new ArrayList<Warning>(),
        getState().getEntityMap());
  }
;

private inline WtList Content =
    &HasOnlyIncludeContent
    {
      yyState.setHasOnlyInclude(true);
    }
    OnlyIncludeContent
  / ContentStar
;




// -- End of file --------------------------------------------------------------
