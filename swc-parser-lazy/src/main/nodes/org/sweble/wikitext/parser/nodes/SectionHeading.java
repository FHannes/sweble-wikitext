/* 
 * This file is auto-generated.
 * DO NOT MODIFY MANUALLY!
 * 
 * Generated by AstNodeGenerator.
 * Last generated: 2012-09-26 11:07:49.
 */

package org.sweble.wikitext.parser.nodes;

import de.fau.cs.osr.ptk.common.ast.AstNodePropertyIterator;
import de.fau.cs.osr.ptk.common.ast.NodeList;

/**
 * <h1>Section SectionHeading</h1> <h2>Grammar</h2>
 * <ul>
 * <li>
 * <p>
 * '='+ Title '='+ Space* EolOrEof
 * </p>
 * </li>
 * </ul>
 * <h2>The title can contain</h2>
 * <ul>
 * <li>
 * <p>
 * ExternalLink
 * </p>
 * </li>
 * <li>
 * <p>
 * InternalLink
 * </p>
 * </li>
 * <li>
 * <p>
 * PageSwitch
 * </p>
 * </li>
 * <li>
 * <p>
 * ParserEntity
 * </p>
 * </li>
 * <li>
 * <p>
 * PlainExternalLink
 * </p>
 * </li>
 * <li>
 * <p>
 * Signature
 * </p>
 * </li>
 * <li>
 * <p>
 * Ticks
 * </p>
 * </li>
 * <li>
 * <p>
 * XmlElement
 * </p>
 * </li>
 * <li>
 * <p>
 * XmlReference
 * </p>
 * </li>
 * </ul>
 * <h2>The title cannot contain</h2>
 * <ul>
 * <li>
 * <p>
 * Newline
 * </p>
 * <ul>
 * <li>
 * <p>
 * Tables
 * </p>
 * </li>
 * <li>
 * <p>
 * Headings
 * </p>
 * </li>
 * <li>
 * <p>
 * Horizontal lines
 * </p>
 * </li>
 * <li>
 * <p>
 * Block level elements
 * </p>
 * </li>
 * </ul>
 * </li>
 * </ul>
 * <h2>The title can not contain (syntactically)</h2>
 * <ul>
 * <li>
 * <p>
 * Newlines
 * </p>
 * </li>
 * </ul>
 */
public class SectionHeading
		extends
			WtContentNode

{
	private static final long serialVersionUID = 1L;
	
	// =========================================================================
	
	public SectionHeading()
	{
		super();
		
	}
	
	public SectionHeading(NodeList content, int level)
	{
		super(content);
		setLevel(level);
		
	}
	
	@Override
	public int getNodeType()
	{
		return org.sweble.wikitext.parser.AstNodeTypes.NT_HEADING;
	}
	
	// =========================================================================
	// Properties
	
	private int level;
	
	public final int getLevel()
	{
		return this.level;
	}
	
	public final int setLevel(int level)
	{
		int old = this.level;
		this.level = level;
		return old;
	}
	
	@Override
	public final int getPropertyCount()
	{
		return 1;
	}
	
	@Override
	public final AstNodePropertyIterator propertyIterator()
	{
		return new AstNodePropertyIterator()
		{
			@Override
			protected int getPropertyCount()
			{
				return 1;
			}
			
			@Override
			protected String getName(int index)
			{
				switch (index)
				{
					case 0:
						return "level";
						
					default:
						throw new IndexOutOfBoundsException();
				}
			}
			
			@Override
			protected Object getValue(int index)
			{
				switch (index)
				{
					case 0:
						return SectionHeading.this.getLevel();
						
					default:
						throw new IndexOutOfBoundsException();
				}
			}
			
			@Override
			protected Object setValue(int index, Object value)
			{
				switch (index)
				{
					case 0:
						return SectionHeading.this.setLevel((Integer) value);
						
					default:
						throw new IndexOutOfBoundsException();
				}
			}
		};
	}
	
	// =========================================================================
	// Children
	
	// =========================================================================
	
}
